#!/n/local/stage/perlbrew/perlbrew-0.43/perls/perl-5.16.0/bin/perl
use strict;
use warnings;
use File::Basename;
use File::Path qw(make_path remove_tree);
use POSIX qw/strftime/;
use Getopt::Long;
use Pod::Usage;
use Cwd;
use File::Spec::Functions;

our ($man,$help,$debug,$dryrun,@prog_args);
our (@dirs,$ebwt,$tx_idx,$DESTDIR,@sub_select,@excluded);
our ($cpu,$queue,$pe);

our $aligner = 'tophat';

MAIN:{
  init();
  my $start = time();
  testIndex();
  my %res = getSample2Files();
  my $ori_dir = cwd;
  my $res_dir = prepResDir() unless $dryrun;
  chdir($res_dir) unless $dryrun;
  qsub_align(%res);
  chdir $ori_dir unless $dryrun;
  
  my $end =time();
  my $sec = $end - $start;
  printf("Aligments was done in  %d hours,%d mins and %d seconds\n",int($sec/(60*60)),($sec/60)%60,$sec%60) unless $dryrun;
  print("Results will be found in $res_dir\n") unless $dryrun;
  exit 0;
}

sub prepResDir{
  my $aln_dir = "$DESTDIR/batchAlignment";
  make_path($aln_dir) unless -e $aln_dir && -d $aln_dir;
  
  my $exp_dir = "$aln_dir/".strftime('aln_%Y-%m-%d_%H:%M:%S',localtime);
  make_path($exp_dir);
  return($exp_dir);
}

sub testIndex{
  my $ori_tx_idx = $tx_idx;
  my $ori_ebwt = $ebwt;

  ## Expand tilde to full path, 
  $tx_idx =~ s/~/$ENV{HOME}/;
  $ebwt =~ s/~/$ENV{HOME}/;
  
  unless (-e "$tx_idx.gff"){
    if (exists $ENV{TOPHAT_TX_INDEXES}){
      $ENV{TOPHAT_TX_INDEXES} =~ s/~/$ENV{HOME}/;
      $tx_idx = -e "$ENV{TOPHAT_TX_INDEXES}/$tx_idx.gff" ? 
	"$ENV{TOPHAT_TX_INDEXES}/$tx_idx" : undef;
    } else {
      $tx_idx = undef;
    }
  }
  
  unless (-e "$ebwt.1.bt2"){
    if (exists $ENV{BOWTIE2_INDEXES}){
      $ENV{BOWTIE2_INDEXES} =~ s/~/$ENV{HOME}/;
      $ebwt = -e "$ENV{BOWTIE2_INDEXES}/$ebwt.1.bt2" ? 
	"$ENV{BOWTIE2_INDEXES}/$ebwt" : undef;
    } else {
      $ebwt = undef;
    }
  }
  
  die "Can't find tohat transcript index $ori_tx_idx\n" unless $tx_idx;
  die "Can't find bowtie2 transcript index $ori_ebwt\n" unless $ebwt;
  
}

sub getSample2Files {
  my %res2;
  
  for my $dir (@dirs){
    $dir = File::Spec->rel2abs($dir);
    
    my ($csv,@rest) = glob "$dir/*.csv";
    die " there is more than one CSV file in $dir->[0]" if @rest;
    
    open FH, $csv;
    my($filename, $dir, $suffix) = fileparse($csv);
    my %res;
    while (<FH>){
      next if $. == 1;
    chomp;
      my @line = split /,/;
      $res{$line[0]} = $line[2];
    }
    my @fastq = map{File::Spec->rel2abs($_)} glob "${dir}*[ACGT].fastq.gz";
    
    my %excluded = map{$_,1} @excluded if @excluded;
    
    @fastq = grep{!exists $excluded{$_}} @fastq;
    
    for my $path (@fastq){
      my($file) = fileparse($path);
      
      if (!exists $res{$file}){
        print STDERR "$file is not associated with a sample name\n";
      } else {
        push @{$res2{$res{$file}}},$path
      }
    }
  }

  if (@sub_select){
    my %sub = map{$_=>1} @sub_select;
    %res2 = map{$_=>$res2{$_}} grep{exists $sub{$_}} keys %res2;
  }
  
  return %res2
}

sub qsub_align{
  my %res = @_;

  my $aln_dir = "TopHat_aln";
  my $sge_out = "SGE_out";
  make_path($aln_dir,$sge_out);
  
  my @exps;
  for my $exp (keys %res) {
    print "Aligning $exp\n";
    
    my $align = "tophat";
    $align   .= " -p$cpu";
    $align   .= " --transcriptome-index=$tx_idx";
    $align   .= " -o $aln_dir/$exp";
    $align   .= " $ebwt";
    my $fastq = join(",",@{$res{$exp}});
    
    push @exps, "_$exp";
    my $com = "qsub";
    $com   .= " -pe $pe $cpu";
    $com   .= " -j y -o $sge_out";
    $com   .= " -q $queue";
    $com   .= " -N $exps[$#exps]";
    $com   .= " -V";
    $com   .= " -cwd";
    $com   .= " -b y '$align $fastq'";
    print "$com\n\n";
    print "============>>>\n\n";
    
    system $com unless $debug || $dryrun;;
  }
  return if $debug || $dryrun;

  ### Create a qrsh dependent on the submited job waiting to join
  ### Prevents from returning before the alignments are done
  print "Waiting on jobs to finish\n";
  my $end = 'qrsh';
  $end   .= ' -now y';
  $end   .= ' -hold_jid '.join ",",@exps;
  $end   .= " 'echo Done!'";
  system $end;
}

sub init {
  my $filename = basename($0);
  @prog_args = ($filename,@ARGV);
  print("Running as:\n",
	join(" ",@prog_args),"\n",
	">>>>>>\n\n"
       );

  GetOptions('debug'                 => \$debug,
	     'help|?'                => \$help,
	     'man'                   => \$man,
	     
	     'directories=s{,}'      => \@dirs,
	     'bowtie2=s'             => \$ebwt,
	     'transcriptome-index=s' => \$tx_idx,
	     'destdir=s'             => \$DESTDIR,
	     
	     'excluded=s{,}'         => \@excluded,
	     'sub_selection=s{,}'    => \@sub_select,
	     
	     'cpu=i'                 => \$cpu,
	     'queue=s'               => \$queue,
	     'pe=s'                  => \$pe,
	     'dryrun'                => \$dryrun
	    ) or pod2usage(1);

  if ($help || !(@dirs && $ebwt && $tx_idx)){
    pod2usage(-exitstatus => 0, -verbose => 2);
  }elsif ($man){
    pod2usage(-exitstatus => 0, -verbose => 0);
  }

  $cpu     ||= 4;
  $queue   ||= 'all.q';
  $pe      ||= 'by_node';

  $DESTDIR ||= $ENV{HOME};
  
  print STDERR "##########RUNNING IN DEBUGING MODE##########\n" if $debug;
}
__END__

=pod

=head1 batchAlignment

  takes SIMR Lims directory and send fastq from samples for alignment in parallel using SGE

=head1 SYNOPSIS

  batchAlignment [options] 
                 [--directories flowcell_1 flowcell_2...]
                 [--transcriptome-index aGenome_known_tc_tophat_idx]
                 [--bowtie2 aGenome_bowtie2_idx]
 Options:
  --help            brief help message
  --man             full documentation

  --destdir          destination dir to save the results (Def: ~/batchAlignement/aln_timeStamp)
  --sub_selection   smaller list of sample to use
  --exluded         sample to remove from the job

  --cpu             number of CPU per tophat jobs (Def: 4)
  --queue           SGE queue to use (Def: all.q)
  --pe              parallel environement (Def: by_node)

  --dryrun          print the jobs that will be sent to SGE

 Every options names can be abreviated to their smaller unique value (ie: -dir/--directories, -de/--destdir)

=head1 OPTIONS

=over 8

=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=item B<-cpu>

Define the number of CPU to run tophat (in fact, the bowtie2 aligment) and the number of slots per node requested
to the SGE manager. I found that there is no net gain in using the full hyperthreaded cores, on a dual core 4 cpu (8 cpu total),
treal time is same at -cpu 4 or -cpu 8. There is a ~20% increase in real time if two 4 cpu jobs are run concurently on a
8 cpu node, so overall,still a significant increase in performance if two jobs run on the same nodes. This is why, the default
is set at 4 cpu (half the dual core)

=back

=head1 DESCRIPTION

B<This program> will read the SIMR Lims generated directories of flowcells barcode
in search of a file with the .csv extension (the Sample_Report.csv and other iteration previously used by the lims).
It will then use the sample name (in column 1) and associates the coressponding fastq file(s) (in column 3), one sample 
to many fastq files, even if located accross flowcells (as long as the flowcell directories are passed as argument to --directories).

Then, the fastq file(s) will be passed to tophat and multiple alignment jobs will be sent to the SGE queue, using a 
parallel environment allowing shared memory (all slot assing to a job has to reside on a single node, look for 
a parallel environment using the B<allocation_rules> = $pe_slots or integers >= then your requested CPU number.

=head1 EXAMPLE

./batchAlignment --dir test --bowtie Drosophila_melanogaster.BDGP5.71.min  --trans Drosophila_melanogaster.BDGP5.71.min.tc

./batchAlignment --dir test --bowtie Drosophila_melanogaster.BDGP5.71.min  --trans Drosophila_melanogaster.BDGP5.71.min.tc --sub C587UAS-CD8GFPmaelVDRC100907-1 C587UAS-CD8GFParmiVDRC16206-3

nohup ssh lepus './batchAlignment --cpu 32 --bowtie Drosophila_melanogaster.BDGP5.71.min  --trans Drosophila_melanogaster.BDGP5.71.min.tc --dir /data/Si/jsg/C0TD0ACXX/ /data/Si/jsg/C0TNYACXX/ /data/Si/jsg/C11LJACXX/ /data/Si/jsg/D10KJACXX/' &

./batchAlignment --debug --cpu 8 --bowtie Drosophila_melanogaster.BDGP5.71.min  --trans Drosophila_melanogaster.BDGP5.71.min.tc --dir /n/analysis/Si/jsg/MOLNG-194/D10KJACXX

=cut
