#!/usr/bin/perl
use strict;
use warnings;
use File::Basename;
use File::Path qw(make_path remove_tree);
use POSIX qw/strftime/;
use Getopt::Long;
use Pod::Usage;
use Cwd;
use File::Spec::Functions;

our ($man,$help,$debug,@prog_args,$Force);
our (@dirs,$ebwt,$tx_idx,$DESTDIR,@sub_select);
our ($cpu,$queue);

## Careful... This is not a great idea... 
our (@excluded); 
our $aligner = 'tophat';

MAIN:{
  init();
  my $start = time();
  testIndex();
  my %res = getSample2Files();
  my $ori_dir = cwd;
  my $res_dir = prepResDir();
  chdir($res_dir);
  qsub_align(%res);
  chdir $ori_dir;
  
  my $end =time();
  my $sec = $end - $start;
  printf("Aligments was done in  %d hours,%d mins and %d seconds\n",int($sec/(60*60)),($sec/60)%60,$sec%60);
  print("Results will be found in $res_dir\n");
  exit 0;
}

sub prepResDir{
  my $aln_dir = "$DESTDIR/batchAlignment";
  make_path($aln_dir) unless -e $aln_dir && -d $aln_dir;
  
  my $exp_dir = "$aln_dir/".strftime('aln_%Y-%m-%d_%H:%M:%S',localtime);
  make_path($exp_dir);
  return($exp_dir);
}

sub testIndex{
  my $ori_tx_idx = $tx_idx;
  my $ori_ebwt = $ebwt;

  ## Expand tilde to full path, 
  $tx_idx =~ s/~/$ENV{HOME}/;
  $ebwt =~ s/~/$ENV{HOME}/;
  
  unless (-e "$tx_idx.gff"){
    if (exists $ENV{TOPHAT_TX_INDEXES}){
      $ENV{TOPHAT_TX_INDEXES} =~ s/~/$ENV{HOME}/;
      $tx_idx = -e "$ENV{TOPHAT_TX_INDEXES}/$tx_idx.gff" ? 
	"$ENV{TOPHAT_TX_INDEXES}/$tx_idx" : undef;
    } else {
      $tx_idx = undef;
    }
  }
  
  unless (-e "$ebwt.1.bt2"){
    if (exists $ENV{BOWTIE2_INDEXES}){
      $ENV{BOWTIE2_INDEXES} =~ s/~/$ENV{HOME}/;
      $ebwt = -e "$ENV{BOWTIE2_INDEXES}/$ebwt.1.bt2" ? 
	"$ENV{BOWTIE2_INDEXES}/$ebwt" : undef;
    } else {
      $ebwt = undef;
    }
  }
  
  die "Can't find tohat transcript index $ori_tx_idx\n" unless $tx_idx;
  die "Can't find bowtie2 transcript index $ori_ebwt\n" unless $ebwt;
  
}

sub getSample2Files {
  my %res2;
  
  for my $dir (@dirs){
    $dir = File::Spec->rel2abs($dir);
    
    my ($csv,@rest) = glob "$dir/*.csv";
    die " there is more than one CSV file in $dir->[0]" if @rest;
    
    open FH, $csv;
    my($filename, $dir, $suffix) = fileparse($csv);
    my %res;
    while (<FH>){
      next if $. == 1;
    chomp;
      my @line = split /,/;
      $res{$line[0]} = $line[2];
    }
    my @fastq = map{File::Spec->rel2abs($_)} glob "${dir}*[ACGT].fastq.gz";
    
    my %excluded = map{$_,1} @excluded if @excluded;
    
    @fastq = grep{!exists $excluded{$_}} @fastq;
    
    for my $path (@fastq){
      my($file) = fileparse($path);
      
      if (!exists $res{$file}){
        print STDERR "$file is not associated with a sample name\n";
      } else {
        push @{$res2{$res{$file}}},$path
      }
    }
  }

  if (@sub_select){
    my %sub = map{$_=>1} @sub_select;
    %res2 = map{$_=>$res2{$_}} grep{exists $sub{$_}} keys %res2;
  }
  
  return %res2
}

sub qsub_align{
  my %res = @_;

  my $aln_dir = "TopHat_aln";
  my $sge_out = "SGE_out";
  make_path($aln_dir,$sge_out);
  
  my @exps;
  for my $exp (keys %res) {
    print STDERR "Aligning $exp\n";
    
    my $align = "tophat";
    $align   .= " -p$cpu";
    $align   .= " --transcriptome-index=$tx_idx";
    $align   .= " -o $aln_dir/$exp";
    $align   .= " $ebwt";
    my $fastq = join(",",@{$res{$exp}});
    
    push @exps, "_$exp";
    my $com = "qsub";
    $com   .= " -pe orte $cpu";
    $com   .= " -j y -o $sge_out";
    $com   .= " -q $queue";
    $com   .= " -N $exps[$#exps]";
    $com   .= " -V";
    $com   .= " -cwd";
    $com   .= " -b y '$align $fastq'";
    print "$com\n\n";
    
    next if $debug;
    system $com;
    print "============>>>\n\n";
  }

  ### Create a qrsh dependent on the submited job waiting to join
  ### Prevents from returning before the alignments are done
  print "Waiting on jobs to finish\n";
  my $end = 'qrsh';
  $end   .= ' -now y';
  $end   .= ' -hold_jid '.join ",",@exps;
  $end   .= " 'echo Done!'";
  system $end;
}

sub init {
  my $filename = basename($0);
  @prog_args = ($filename,@ARGV);
  print("Running as:\n",
	join(" ",@prog_args),"\n",
	">>>>>>\n\n"
       );

  GetOptions('debug'                 => \$debug,
	     'help|?'                => \$help,
	     'man'                   => \$man,
	     
	     'directories=s{,}'      => \@dirs,
	     'bowtie_index=s'        => \$ebwt,
	     'transcriptome-index=s' => \$tx_idx,
	     'destdir=s'             => \$DESTDIR,
	     
	     'excluded=s{,}'         => \@excluded,
	     'sub_selection=s{,}'    => \@sub_select,
	     
	     'cpu=i'                 => \$cpu,
	     'queue=s'               => \$queue,

	    ) or pod2usage(1);

  if ($help || !(@dirs && $ebwt && $tx_idx)){
    pod2usage(-exitstatus => 0, -verbose => 2);
  }elsif ($man){
    pod2usage(-exitstatus => 0, -verbose => 0);
  }

  $cpu     ||= 8;
  $queue   ||= 'all.q';
  $DESTDIR ||= $ENV{HOME};
  
  print STDERR "##########RUNNING IN DEBUGING MODE##########\n" if $debug;
}


__END__

example:

batchAlignment --dir test --bowtie Drosophila_melanogaster.BDGP5.71.min  --trans Drosophila_melanogaster.BDGP5.71.min.tc

batchAlignment --dir test --bowtie Drosophila_melanogaster.BDGP5.71.min  --trans Drosophila_melanogaster.BDGP5.71.min.tc --sub C587UAS-CD8GFPmaelVDRC100907-1 C587UAS-CD8GFParmiVDRC16206-3

nohup batchAlignment --cpu 32 --bowtie Drosophila_melanogaster.BDGP5.71.min  --trans Drosophila_melanogaster.BDGP5.71.min.tc --dir /data/Si/jsg/C0TD0ACXX/ /data/Si/jsg/C0TNYACXX/ /data/Si/jsg/C11LJACXX/ /data/Si/jsg/D10KJACXX/ &
